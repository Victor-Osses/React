******* Comandos necessários para iniciar com React *******

- npx create-react-app "nome do projeto" (Este comando cria o projeto com todas as dependências)
- cd "nome do projeto"
- npm start (Este comando inicializa o servidor de desenvolvimento)
- Ctrl+c (Finaliza o servidor)

**** JSX ****
- O JSX é como um HTML, porém, dentro do código JavaScript;
- É a principal maneira de escrever HTML com o React;
- Podemos interpolar variáveis inserindo elas entre {};
- É possível também executar funções em JSX;
- Inserir valores em atributos de tags também é válido em JSX

**** Componentes ****
- Permite dividir a aplicação em partes
- Os componentes renderizam JSX, assim como o App.js (que é um componente);
- Precisamos criar um arquivo de componente;
- E importá-lo onde precisamos utilizar;
- Normalmente ficam em uma pasta chamada components

**** Props (properties) ****
- As props são valores passados para componentes;
- Podemos deixá-los dinâmicos;
- Ou seja, mudando a execução por causa do valor da prop;
- O valor é passado como um atributo na chamada do componente;
- E precisa ser resgatado dentro de uma propriedade/argumento chamada props na função de definição do componente;
- As props são somente de leitura!;
- Podemos definir tipos para as props, realizando uma espécie de validação;
- Definimos em um objeto chamado propTypes no próprio componente;
- E ainda há a possibilidade de definir um valor padrão;
- Neste caso, utilizamos o objeto defaultProps
    Tal como no exemplo: 
        <Componente nome="André" idade={19} />

        function Componente({nome, idade}){
            return (
                code...
            )
        }

        Componente.propTypes = {
            marca: PropTypes.string.isRequired,
            lancamento: PropTypes.number
        }

        Componente.defaultProps = {
            marca: 'Faltou a marca',
            lancamento: 0
        }

**** Adicionando CSS ****
- O CSS pode ser adicionado de forma global na aplicação por meio do arquivo index.css, por exemplo;
- Porém, é possível estilizar a nível de componentes;
- Utilizamos o CSS modules para isso;
- Basta criar um arquivo como: Componente.module.css;
- E chamar este css no componente
    Exemplo:
        import styles from './Custom.css'

**** Fragmentos ****
- Os Reacts Fragments permitem a criação de um componente sem elemento pai;
- O propósito é descomplicar os nós do DOM;
- A sintaxe é <> e </>. Observe que não há um nome para a tag;
- Criamos no próprio JSX
    Exemplo:
        return (
            <>
                conteúdo...
            </>
        )

**** Eventos ****
- Os eventos de React são os mesmos eventos do DOM;
- Ou seja, temos eventos para responder a um click;
- O evento é atrelado a uma tag que irá executá-lo;
- Geralmente um método é atribuído ao evento;
- Este método deve ser criado no componente
    Exemplo:
        <input type="text" onClick={função} onChange={(e) => setNome(e.target.value)}></input>
        <form onSubimit={função2}></form>

**** UseState ****
- O useState é um hook (conexão) do React;
- Com ele conseguimos manusear o estado de um componente de forma simples;
- Este hook funciona muito bem com eventos;
- Podemos atrelar um evento a mudança de state
- useState(): retorna uma "tupla" com o valor inicial e uma função para alterar o valor da variável
    Exemplo de uso:
        import {useState} from 'react'

        const [nome, setNome] = useState('valorInicial')

        <input type="text" placeholder="Digite seu nome" onChange={(e) => setNome(e.target.value)}></input>

**** Métodos por props ****
- Os métodos também podem ser passados por props;
- Ou seja, um componente filho pode ativar o método do seu ancestral;
- Vamos acessar o método por meio de um evento;
- A sintaxe é a mesma de uma props de dados: props.meuEvento
    Exemplo de uso:
        <Componente somar={somar}/>

**** Renderização por condição ****
- Podemos atrelar a exibição de algum elemento a um if;
- Esta ação é chamada de renderização condicional;
- Envolvmos as tags em chaves {};
- Como as chaves executam JS, criamos nossa condição;
- É possível usar o state para criar condições
    Exemplo de condição:
        {array.length > 0 && ? (
                <p>Array com elementos</p>
            ) :
            <p>Array sem elementos</p>
        }

**** Listas ****
- Para renderizar uma lista, vamos primeiramente precisar de um array;
- Depois utilizaremos a função map para percorrer cada um dos itens desse array;
- Podemos assim renderizar algo na tela;
- É possível unir operadores condicionais com a renderização de listas
    Exemplo de uso:
        {itens.length > 0 && (
            itens.map((item, index) => (
                <p key={index}>{item}</p>
            ))
        )}

**** State Lift (elavar o estado) ****
- State Lift é uma técnica utilizada para compartilhar o state;
- É normal vários componentes dependerem do mesmo estado;
- Então precisamos elevar o nível do mesmo a um componente pai;
- Então centralizamos o state pai e definimos quem usa e quem define (setState)
- É basicamente criar um const [nome, setNome] = useState() em um elemento pai
- Daí você passa o setNome para os elementos filhos via props e estes manipulam o nome
- A variável nome tem agora seu valor modificado no elemento pai e no elemento filho
- Dessa forma, posso passar agora a variável nome para outros componentes a partir do elemento pai
- A ideia é ter um componente que seta o atributo e outro que usa, tudo a partir de um state lift

**** React Router ****
- O React Router é um pacote para mudança de URLs da aplicação;
- Podemos assim acessar outras views sem o page reload;
- Trocando apenas uma parte do layout da aplicação, ou seja, o que muda de view para view;
- Precisamos instalar esse pacote no projeto;
- E também realizar algumas mudanças em como o App é estruturado
- Para instalar: npm install react-router-dom
    Exemplo de uso:
        import {BrowserRouter as Router, Routes, Route, Link} from 'react-router-dom'

        function App(){
            <Router>
                <ul>
                    <li><Link to="contatos">Contatos</Link></li>
                </ul>

                <Routes>
                    <Route path="contatos" element={<Contatos/>}></Route>
                </Routes>
            </Router>
        }

**** React Icons ****
- O React Icons é um pactoe de ícones externo;
- Precisamos adicionar ao projetos através do npm;
- Ele nos permite adicionar ícones ao projeto com uma sintaxe parecida a de componentes;
- Além disso, há uma grande quantidade de ícones disponíveis.
- Utilize o site: https://react-icons.github.io/react-icons/
- Instale com o comando: npm install react-icons
    Exemplo de uso:
        //Importando do Font Awesome
        import {FaFacebook, FaInstagram, FaTwitter} from 'react-icons/fa'
        <span> <FaFacebook/> </span>

**** Dependências ****
    - json-server: É uma API que simula um Banco de Dados
    - uuid: Cria IDs
    - react-icons: Permite criar ícones
        Exemplo de instalação:
            npm install json-server uuid react-icons

**** Conectando com API (json-server ****
- É uma forma de simular o backend, permitindo assim o CRUD
- A principio, é necessário ter a dependência json-server instalada (npm install json-server)
- Depois disso, cria-se na raiz do projeto (onde fica o .gitignore) um arquivo db.json
- O arquivo db.json será nossa API / Banco de Dados
- A princípio, podemos criar, por exemplo, uma entidade chamada projects, que vai ser um Array
 que vai conter os dados dos projetos cadastrados em um sistema qualquer:
    {
        "projects": [] // É como se fosse uma tabela do BD
    }
- Agora é possível acessar uma página que é referente a esses dados, mas antes disso, precisamos criar um comando
- No arquivo package.json, na parte de scripts, adicionamos o seguinte comando: 
    "backend": "json-server --watch db.json --port 5000"
- Agora, quando eu abrir o projeto, preciso dar um npm start e um npm run backend
- Feito isso, posso acessar agora a seguinte URL:
     http://localhost:5000/projects
- No arquivo db.json eu posso criar categorias para um select, por exemplo:
    "categories": [
            {
                "id": 1,
                "name": "Infra"  
            },
            {
                "id": 2,
                "name": "Desenvolvimento"  
            },
            {
                "id": 3,
                "name": "Design"  
            },
            {
                "id": 4,
                "name": "Planejamento"  
            }
        ]
- Posso acessar agora essas categorias pela URL:
    http://localhost:5000/categories
- Dentro da aplicação, eu posso pegar requisitar essas categorias para colocar de opções em um elemento select:
    import { useState, useEffect } from 'react'

    const [categories, setCategories] = useState([]);

    // Para não ficar fazendo a requisição em um loop infinito e renderizar apenas uma vez
    // Executa quando a página é carregada
    useEffect(() => {
        // Requisição (busca)
        fetch("http://localhost:5000/categories", {
            method: "GET", //Existem vários métodos: POST, PATCH, DELETE etc
            headers: {
                "Content-Type": 'application/json' // Indica que vai retornar um arquivo .json
            }
        }).then((resp) => resp.json()) // Pega os dados retornados da requisição e transforma em um json
        .then((data) => setCategories(data)) // Seta os dados em categories
        .catch(err => console.log(err)) // Caso aja um erro, exibe ele no console
    }, []) //Valor inicial. Nesse caso, estou indicando que o estado inicial das options é um array vazio

    <Select name="category_id" text="Selecione a categoria" options={categories}/>

**** CRUD com Json Server ****
- No exemplo anterior, vimos como ler dados do Json server
- Veja um exemplo de inserção (CREATE) de Dados de projetos

    import { useNavigate } from 'react-router-dom' // Hook que permite redirecionar um usuário e enviar mensagens

    const navigate = useNavigate()

    function createProject(project){
        fetch('http://localhost:5000/projects', {
            method: "POST",
            headers: {
                "Content-Type": 'application/json' 
            }
            body: JSON.stringify(projects) 
        }).then((resp) => resp.json()) 
        .then((data) => {
            navigate("/projects", state : {message: "Projeto criado com sucesso!"}) // Redirecionando o usuário
            // Em projects eu posso fazer o GET dos projetos cadastrados para exibi-los
        }) 
        .catch(err => console.log(err))
    }

- Veja um exemplo de ATUALIZAÇÃO (UPDATE) de Dados de projetos

    import {useParams} from 'react-router-dom'

    // Pega os parâmetros vindos da URL
    const {id} = useParams();

    function editProject(id){
        // Passa-se o ID do projeto que vai ser modificado
        fetch('http://localhost:5000/projects/${id}', {
            method: "PATCH",
            headers: {
                "Content-Type": 'application/json' 
            }
            body: JSON.stringify(project) // Atualiza o projeto com o ID especificado na Json Server
        }).then((resp) => resp.json()) 
        .then((data) => {
            setProject(data) // Atualiza os dados do projeto que já está carregado
        }) 
        .catch(err => console.log(err))
    }

- Veja um exemplo de EXCLUSÃO (DELETE) de Dados de projetos

    function removeProject(id){
        // Passa-se o ID do projeto que vai ser modificado
        fetch('http://localhost:5000/projects/${id}', {
            method: "DELETE",
            headers: {
                "Content-Type": 'application/json' 
            }
        }).then((resp) => resp.json()) 
        .then(() => {
            setProjects(projects.filter((project) => project.id !== id)) 
            // Reinsere todos os projetos, exceto o com ID passado
        }) 
        .catch(err => console.log(err))
    }

**** Atualizando versão do React ****
- Comando para atualizar para a última versão: npm install react-router-dom@latest
- Pode ser necessário reparar o projeto